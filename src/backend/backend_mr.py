# Copyright (C) 2018-2024 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

# This test can be run from the command line as follows:
# python3 -m unittest discover -v  -s . -p "*_mr_test.py"

import sys
# I don't know how the deployment of components works in OpenVino, so I simply hard-code the library in the import path
# for test purposes, this will need to be updated. I'm hoping we can get pyswip into conda/pip, but that is not ready yet.
# You will want to use the latest pyswip library, from here:
# https://af01p-fm.devtools.intel.com/artifactory/mineralriverswiplibrary-fm-local/releases/main/
sys.path.append(r'/Users/awherr/depot/libraries.telemetry.software-improvement.python.pyswip/build_Debug_arm64_Darwin/python_extensions/lib')
import pyswip

from .backend import TelemetryBackend
from ..utils.params import telemetry_params
from ..utils.message import Message, MessageType

class MRBackend(TelemetryBackend):
    id = 'mr'

    # We are connect the interface to a debug ingestion point so we can see the data we are generating without
    # corrupting the product database. Prior to release this will need to be replace with the 'openvino'
    # product and its corresponding product_token (contact rohith.g.shenoy@intel.com for details)
    product_name = 'policy_test'
    product_token = 'b6cded19-497f-01db-9751-bfaeb504a56a'

    # If you want to see the data that is generated by testing you can connect to the ingest point at:
    # https://analytics-kb.softwareimprovement.intel.com/s/policy_test/app/home#/
    # username: policy_test_admin
    # password: 6UJm4nRyybbqv2i8BxHEc2WgBS2aHtoKg

    def __init__(self, tid: str = None, app_name: str = None, app_version: str = None):
        super(MRBackend, self).__init__(tid, app_name, app_version)
        self.event_types = ["EVENT", "ERROR", "STACK_TRACE", "SESSION_START", "SESSION_END"]
        attr = pyswip.Attribs()
        if(app_name):
            attr["app_name"] = app_name
        if(app_version):
            attr["app_version"] = app_version
        self.collector = pyswip.register_product(self.product_name, self.product_token, attr)

    def send(self, message: Message):
        if message is None:
            return
        attr = pyswip.Attribs()
        attr["type"] = self.event_types[message.type.value]
        for key, value in message.attrs.items():
            attr[key] = value
        self.collector.collect('OpenVinoEvent', attr)

    def build_event_message(self, event_category: str, event_action: str, event_label: str, event_value: int = 1, **kwargs):
        data = {'t': 'event', 'ec': event_category, 'ea': event_action, 'el': event_label, 'ev': event_value}
        return Message(MessageType.EVENT, data)

    def build_session_start_message(self, category: str, **kwargs):
        return self.build_event_message(category, "session", "start", 1)

    def build_session_end_message(self, category: str, **kwargs):
        return self.build_event_message(category, "session", "end", 1)

    def build_error_message(self, category: str, error_msg: str, **kwargs):
        return self.build_event_message(category, "error_", error_msg, 1)

    def build_stack_trace_message(self, category: str, error_msg: str, **kwargs):
        return self.build_event_message(category, "stack_trace", error_msg, 1)

    def generate_new_cid_file(self):
        return

    def cid_file_initialized(self):
        return True

    def remove_cid_file(self):
        pyswip.forget_policy(self.product_name)
